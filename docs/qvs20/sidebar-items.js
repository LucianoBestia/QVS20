initSidebarItems({"enum":[["Qvs20Error",""]],"fn":[["remove_src_loc","src_loc is changing every time I edit the code then all the error messages are different and the tests must be changed I will remove src loc for error testing"]],"macro":[["err_trim","trim start of error for concatenation"],["s","short macro `s!()` for &str.to_string or format!(). because that is so common. Equivalents: s!(), x.to_string(), x.to_owned(),String::new(), format!()..."],["src_loc",""]],"mod":[["qvs20_reader_mod",""],["qvs20_table_mod","The table structure is very flexible, because it is defined in runtime. A lot of times the table is used just as an intermediary, and don't need a fixed Rust struct in compile time. It means that sometimes a change in the table does not dictate change in source code and compiling."],["qvs20_table_rows_mod","The table structure is very flexible, because it is defined in runtime. A lot of times the table is used just as an intermediary, and don't need a fixed Rust struct in compile time. It means that sometimes a change in the table does not dictate change in source code and compiling."],["qvs20_table_schema_mod","The table structure is very flexible, because it is defined in runtime. A lot of times the table is used just as an intermediary, and don't need a fixed Rust struct in compile time. It means that sometimes a change in the table does not dictate change in source code and compiling."],["qvs20_writer_mod",""]],"struct":[["ReaderForQvs20","ReaderForQvs20"],["Table","The Table type contains TableSchema and TableRows."],["TableRows",""],["TableSchema",""],["WriterForQvs20",""]]});